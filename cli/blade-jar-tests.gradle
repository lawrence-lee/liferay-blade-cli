task testCreateCommand(type: JavaExec)
task testGwCommand(type: JavaExec)
task testHelpCommand(type: JavaExec)
task testInitCommand(type: JavaExec)
task testSamplesCommand(type: JavaExec)
task testShCommand(type: JavaExec)
task testVersionCommand(type: JavaExec)

apply plugin: "java"


check {
	tasks.withType(JavaExec)
jar {
	dependsOn ":cli:copyMavenProfileJar"
	archiveName = "blade.jar"
	from ":cli:createToolingZip, :clicreateWrapperZip"
}

testCreateCommand {
	dependsOn jar

	String command = "create"
	String testArgs = "-l"

	String errors = _testJar(command, testArgs)

	Assert.assertNull(errors)
}


testGwCommand {
	dependsOn jar

	String command = "gw"

	String errors = _testJar(command)

	Assert.assertNull(errors)
}

testHelpCommand {
	dependsOn jar

	String command = "help"

	String errors = _testJar(command)

	Assert.assertNull(errors)
}

testInitCommand {
	dependsOn jar

	String command = "init"
	String testArgs = "hello world"

	String errors = _testJar(command, testArgs)

	Assert.assertNull(errors)
}

testSamplesCommand {
	dependsOn jar

	String command = "samples"

	String errors = _testJar(command)

	Assert.assertNull(errors)
}

testShCommand {
	dependsOn jar

	String command = "sh"

	String errors = _testJar(command)

	assert errors.contains("Error: sh")
}

testVersionCommand {
	dependsOn jar

	String command = "version"

	String jarVersion = _testJar(command, "true")

	assert jarVersion.contains(project.Version)
}

private String _testJar(String command, String... args) {

	def errorOutputStream = new ByteArrayOutputStream()
	def standardOutputStream = new ByteArrayOutputStream()

	javaexec {
		args = [":jar.archivePath", command, args]
		errorOutput = errorOutputStream
		main = "-jar"
		standardOutput = standardOutputStream
	}

	if (args.contains("true")) {
		def outputString = standardOutputStream.toString()

		return outputString
	}
	else {
		def errorOutputString = errorOutputStream.toString()

		return errorOutputString
	}
}