allprojects {
	tasks.withType(JavaExec) {
		dependsOn jar
	}
}

task testCreateCommand(type: JavaExec)
task testGwCommand(type: JavaExec)
task testHelpCommand(type: JavaExec)
task testInitCommand(type: JavaExec)
task testSamplesCommand(type: JavaExec)
task testVersionCommand(type: JavaExec)

check {
	dependsOn tasks.withType(JavaExec)
}

def errorStream = new ByteArrayOutputStream()
def standardStream = new ByteArrayOutputStream()

testCreateCommand {
	args = [jar.archivePath, 'create', '-l']
	errorOutput = errorStream
	main = '-jar'
	standardOutput = standardStream

	doLast{
		assert standardStream.toString().contains("service-builder")
		assert true == errorStream.toString().empty
	}
}

testGwCommand {
	args = [jar.archivePath, 'gw']
	errorOutput = errorStream
	main = '-jar'
	standardOutput = standardStream

	doLast{
		assert standardStream.toString().contains(gradle.gradleVersion)
		assert true == errorStream.toString().empty
	}
}

testHelpCommand {
	args = [jar.archivePath, 'help']
	errorOutput = errorStream
	main = '-jar'
	standardOutput = standardStream

	doLast{
		assert standardStream.toString().contains("init")
		assert true == errorStream.toString().empty
	}
}

testInitCommand {
	File initDir = new File(buildDir, "initTest")

	initDir.mkdirs()

	args = [jar.archivePath, 'init', "hello world"]
	errorOutput = errorStream
	main = '-jar'
	standardOutput = standardStream
	workingDir = initDir

	doLast{
		File initProjectDir = new File(initDir, "hello world")

		assert initProjectDir.exists()
		assert true == errorStream.toString().empty

		delete initDir
	}
}

testSamplesCommand {
	args = [jar.archivePath, 'samples']
	main = '-jar'
	standardOutput = standardStream
	errorOutput = errorStream

	doLast{
		assert standardStream.toString().contains("jsp-portlet")
		assert true == errorStream.toString().empty
	}
}

testVersionCommand {
	args = [jar.archivePath, 'version']
	main = '-jar'
	standardOutput = standardStream
	errorOutput = errorStream

	doLast{
		String projectVersion = project.version.replaceFirst("-", ".")
		assert true == errorStream.toString().empty
		assert standardStream.toString().contains(projectVersion)
	}
}